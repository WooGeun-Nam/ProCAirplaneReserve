// 마지막고침 : 2021.12.10
/*-----------------------------------------------
16조 항공예매 시스템

-------------------------------------------------*/
#define _CRT_SECURE_NO_WARNINGS

//-----------------------------------------

#include <stdlib.h>
#include <stdio.h>
#include <ctype.h>
#include <string.h>
#include <conio.h>
#include <time.h>

/* for oracle */
#include <sqlda.h>
#include <sqlca.h>
#include <sqlcpr.h>

//#ifdef WIN32
#include < windows.h >
/*---------------  화면 커서 위치 제어 ----------------------*/
void gotoxy(int x, int y) ;
void getxy(int *x, int *y) ;
void clrscr(void) ;
/*-----------------------------------------------------------*/
#define getch() _getch()

void DB_connect(); // DB 접속
void rtrim();
void pstart(); // 프로그램 시작
void LogIn(); // 로그인
void mainPage(); // 사용자 페이지
void Reservation(); // 예매 메뉴
void adminPage(); // 관리자 페이지
void Mypage(); // 사용자 Mypage
void SignUp(); // 회원가입
void Delete_information(); // 회원 탈퇴
void Mypage_update(); // 회원정보 수정
void Mypage_update_select(); // 회원정보 수정시 기존 데이터 가져오기
void Reservation_Search(); // 사용자 항공편 조회
void MyReserv(); // 내 예매내역 조회
void search_Flight(); // 관리자 항공편 조회
void insert_Flight(); // 관리자 항공편 추가
void search_Airplane(); // 관리자 항공기 조회
void My_Mileage(); // 사용자 마일리지 조회

void sql_error();

EXEC SQL BEGIN DECLARE SECTION;
	VARCHAR uid[20];
	VARCHAR pwd[20];
EXEC SQL END DECLARE SECTION;

char global_id[20], global_password[20], global_name[20]; // 접속중인 사용자를 식별하기 위한 전역변수
char member_id[20], member_password[20], member_name[30]; // null 값시 기존데이터 처리를 위한 전역변수

void main()
{
    _putenv("NLS_LANG=American_America.KO16KSC5601"); // 한글
	DB_connect(); // DB 접속
    pstart(); // 예매 프로그램 시작
	EXEC SQL COMMIT WORK RELEASE ;
	getch();
}

void DB_connect()
{
   /* 아이디와 패스워드 수정해서 넣으세요*/
    strcpy((char *)uid.arr,"b20163315@//sedb.deu.ac.kr:1521/orcl");
    uid.len = (short) strlen((char *)uid.arr);
    strcpy((char *)pwd.arr,"20163315");
    pwd.len = (short) strlen((char *)pwd.arr);

    EXEC SQL CONNECT :uid IDENTIFIED BY :pwd;

	// connection이 실패했을경우의 처리부분

    if (sqlca.sqlcode != 0 && sqlca.sqlcode != -1405){ 
		printf("\7Cconnect error: %s", sqlca.sqlerrm.sqlerrmc);
		getch();
		exit(-1);
    }

    printf("Oracle Connect SUCCESS by %s\n", uid.arr);
}

void print_screen(char fname[])
{
   FILE *fp;
   char line[100];

   if ( (fp = fopen(fname,"r"))  == NULL ){
      printf("file open error\n");
      getch();
      exit(-1);
   }
   while(1)
   {
      if( fgets(line, 99, fp) == NULL){
           break;
      }
      printf("%s", line);
   }

   fclose(fp);
}

void pstart() {
    char sel[20];

    system("cls");
    printf("\n");
    clrscr(); 
    print_screen("welcome_page.txt");
    /* 초기 시작화면 */
    gotoxy(37,13); 
    gets(sel);
    int val = sel[0] - '0';
    if (val == 1) {
        // 로그인
        LogIn();
    } else if (val == 2) {
        // 회원가입
        SignUp();
    } else if (val == 3) {
        exit(0);
        // 종료
        printf("종료");
    } else {
        // 잘못입력
        printf("\n잘못된 입력입니다.");
        Sleep(1000);
        pstart();
    }
}

void LogIn() {
EXEC SQL BEGIN DECLARE SECTION;
    varchar  v_id[20];
    varchar  v_password[20];
    varchar  v_memname[20];

    char dynstmt[1000];
EXEC SQL END DECLARE SECTION;
    char id[20];
    char passwd[20];

    system("cls");
    printf("\n");
    clrscr(); 
    print_screen("welcome_select.txt");
    // 로그인 
    gotoxy(39,8); 
    gets(id);

    gotoxy(41,9); 
    gets(passwd);

    EXEC SQL WHENEVER SQLERROR DO sql_error("\7ORACLE ERROR:\n");
   
    sprintf(dynstmt,"SELECT Member_Id, Member_Password, Member_Name FROM MEM where Member_ID = '%s' and Member_Password = '%s'", id, passwd) ;

    EXEC SQL PREPARE S FROM :dynstmt ;

    EXEC SQL DECLARE c_cursor CURSOR FOR S ; 

    EXEC SQL OPEN c_cursor ; 

    EXEC SQL WHENEVER NOT FOUND do break;
    for(;;)
    {
        EXEC SQL FETCH c_cursor INTO :v_id, :v_password, :v_memname;
	    v_id.arr[v_id.len] = '\0';
        v_password.arr[v_password.len] = '\0';
        v_memname.arr[v_memname.len] = '\n';
    }
    EXEC SQL CLOSE c_cursor; 
   
    if(sqlca.sqlerrd[2] > 0) {
        // 로그인 성공
        strcpy(global_id, v_id.arr);
	    strcpy(global_password, v_password.arr); // 전역변수에 로그인 id, pw 저장
        strcpy(global_name, v_memname.arr);
        if(strcmp("admin",global_id) == 0) { // 입력된 값이 관리자인지 확인
            // 관리자 계정 로그인
            adminPage();
            pstart();
        } else {
            // 일반 사용자 로그인
            mainPage();
        }
    } else {
        // 로그인 실패
        printf("\n로그인 실패");
        Sleep(1000);
	    pstart();
    }    
}

void adminPage() {
    char sel[20];

    system("cls");
    printf("\n");
    clrscr(); 
    print_screen("admin_Page.txt");

    gotoxy(37,15); 
    gets(sel);
    int val = sel[0] - '0';
    if (val == 1) {
        // 항공편 조회
        search_Flight();
    } else if (val == 2) {
        // 항공편 추가
        insert_Flight();
    } else if (val == 3) {
        // 항공기 조회
        search_Airplane();
    } else if (val == 4) {
        // 로그아웃
        pstart();
    } else {
        // 잘못입력
        printf("\n잘못된 입력입니다.");
        Sleep(1000);
        adminPage();
    }
}

void mainPage() {
    char sel[20];

    system("cls");
    printf("\n");
    clrscr(); 
    print_screen("main_page.txt");

    gotoxy(37,14); 
    gets(sel);
    int val = sel[0] - '0';
    if (val == 1) {
        // 예매
        Reservation();
    } else if (val == 2) {
        // 마이페이지
        Mypage();
    } else if (val == 3) {
        // 로그아웃
        pstart();
    } else {
        // 잘못입력
        printf("\n잘못된 입력입니다.");
        Sleep(1000);
        mainPage();
    }
}

void Reservation() {
    char sel[20];

    system("cls");
    printf("\n");
    clrscr(); 
    print_screen("reservation_page.txt");

    gotoxy(43,14); 
    gets(sel);
    int val = sel[0] - '0';
    if (val == 1) {
        // 예매
        Reservation_Search();
    } else if (val == 2) {
        // 예매 조회
        MyReserv();
    } else if (val == 3) {
        // 뒤로
        mainPage();
    } else {
        // 잘못입력
        printf("\n잘못된 입력입니다.");
        Sleep(1000);
        Reservation();
    }
}

void Mypage() {
    char sel[20];

    system("cls");
    printf("\n");
    clrscr(); 
    print_screen("mypage_page.txt");

    gotoxy(37,13); 
    gets(sel);
    int val = sel[0] - '0';
    if (val == 1) {
        // 마일리지 조회
        My_Mileage();
    } else if (val == 2) {
        // 개인 정보 수정
        Mypage_update_select();
    } else if (val == 3) {
        // 회원 탈퇴
        Delete_information();
    } else if (val == 4) {
        // 뒤로
        mainPage();
    } else {
        // 잘못입력
        printf("\n잘못된 입력입니다.");
        Sleep(1000);
        Mypage();
    }
}

void SignUp()
{
EXEC SQL BEGIN DECLARE SECTION;
    varchar member_name[20];
    varchar member_id[20];
    varchar member_password[30];

    char dynstmt[1000];
EXEC SQL END DECLARE SECTION;

    /* Register sql_error() as the error handler. */
    EXEC SQL WHENEVER SQLERROR DO sql_error("\7ORACLE ERROR:\n");

    system("cls");
    printf("\n");
    clrscr();  
    print_screen("welcome_insert.txt");
    /* 이름 입력 */
    gotoxy(38,8)  ; 
    gets(member_name.arr);
    member_name.len = strlen(member_name.arr);

    /* 아이디 입력 */
    gotoxy(40,9)  ;
    gets(member_id.arr);
    member_id.len = strlen(member_id.arr);

    /* 비밀번호 입력 */
    gotoxy(42,10) ;
    gets(member_password.arr);
    member_password.len = strlen(member_password.arr);

    sprintf(dynstmt,"insert into Mem values ( '%s', '%s', '%s', 0)" ,member_id.arr, member_password.arr, member_name.arr);

    /* 실행시킬 SQL 문장*/
    EXEC SQL EXECUTE IMMEDIATE :dynstmt ;

    EXEC SQL COMMIT WORK ;
    printf("\n회원 가입이 완료되었습니다.");
    printf("\n*에러메시지가 출력된 경우 아이디가 중복된 상태입니다.");
    Sleep(2000);
    pstart();
}

void Delete_information()
{

EXEC SQL BEGIN DECLARE SECTION;

   char dynstmt[1000];

EXEC SQL END DECLARE SECTION;

   char  no[100] ;
   char  flag = 'n' ;

   EXEC SQL WHENEVER SQLERROR DO sql_error("\7ORACLE ERROR:\n");

    system("cls");
    printf("\n");
    clrscr(); 
    print_screen("mypage_delete.txt");

    gotoxy(39,8) ;
    printf("%s",global_id);
    gotoxy(41,9) ;
    printf("%s",global_password); 

    gotoxy(30,13) ;
    printf("계정을 삭제하시겠습니까? (y/n) :");   

   flag = (char *)getch() ;

   if( flag == 'y' || flag =='Y' ){
    sprintf(dynstmt,"delete from Mem where member_id = '%s'", global_id);
       printf("stmt:%s\n", dynstmt);
       EXEC SQL EXECUTE IMMEDIATE :dynstmt ;
       printf("삭제 성공\n");   
       printf("잠시후 메인화면으로 이동합니다.");
       EXEC SQL COMMIT WORK ;
       Sleep(2000);
       pstart();
   }
   else {
        printf("\n삭제를 취소합니다.");
        Sleep(1000);
        Mypage();
   }
}

void Mypage_update()
{

EXEC SQL BEGIN DECLARE SECTION;

   char dynstmt[1000];

EXEC SQL END DECLARE SECTION;

   char  id[20];
   char  password[20];
   char  name[30];
  
   EXEC SQL WHENEVER SQLERROR DO sql_error("\7ORACLE ERROR:\n");

clrscr();
   print_screen("mypage_update.txt");

  gotoxy(38,8)  ; 
   gets(name);
   if( name[0]== '\0' ){
        strcpy(name, member_name);
   }


    gotoxy(40,9)  ;   
   gets(id);
   if(id[0] == '\0' ) {       
       strcpy(id, member_id);
   }

   gotoxy(42,10)  ; 
   gets(password);
   if( password[0] == '\0' ){
       strcpy(password, member_password);
   }


   sprintf(dynstmt,"update Mem set member_id = '%s', member_password= '%s',member_name = '%s' where member_id = '%s' ", id, password, name, member_id);
   // printf("stmt:%s\n", dynstmt);
   
   EXEC SQL EXECUTE IMMEDIATE :dynstmt ;

   // printf("Update Success\n");
   EXEC SQL COMMIT WORK ; 
    printf("\n정보수정이 완료되었습니다.");
    Sleep(1000);
    Mypage();
}

void Mypage_update_select()
{
EXEC SQL BEGIN DECLARE SECTION;
   varchar  id[20];
   varchar  password[20];
   varchar  name[30];

    char dynstmt[1000];
EXEC SQL END DECLARE SECTION;
    
    char no_temp1[10];

    EXEC SQL WHENEVER SQLERROR DO sql_error("\7ORACLE ERROR:\n");
   
    printf("비밀번호를 입력해 주세요 : ");
    fgets(no_temp1, 10, stdin); 
    no_temp1[strlen(no_temp1)-1] = '\0' ;  
    
    

    if(strcmp(no_temp1,global_password) == 0) {
        sprintf(dynstmt,"SELECT member_id, member_password, member_name  FROM Mem where member_id = '%s'", global_id) ;
    
        EXEC SQL PREPARE S FROM :dynstmt ;

        EXEC SQL OPEN c_cursor ; 

    
        EXEC SQL WHENEVER NOT FOUND do break;
        for(;;)
        {
            EXEC SQL FETCH c_cursor INTO :id, :password, :name ;

            id.arr[id.len] = '\0';
            password.arr[password.len] = '\0';
            name.arr[name.len] = '\0';

            printf("아이디:%s 비밀번호:%s 이름:%s \n", id.arr, password.arr, name.arr);
        }
        
        strcpy(member_id, id.arr);
        strcpy(member_password, password.arr);
        strcpy(member_name, name.arr);

        printf("match tuple no : %d\n", sqlca.sqlerrd[2]);
        
        EXEC SQL CLOSE c_cursor; 

        if(sqlca.sqlerrd[2] > 0) {
            system("cls");
            printf("\n");
            Mypage_update();
        } else {
            printf("일치하는 데이터가 없습니다.");
            Mypage();
        }   
    } else {
        printf("\n비밀번호가 틀렸습니다.");
        Sleep(1000);
        Mypage();
    }
}

#define PAGE_NUM 10 // 한페이지에서 보여주는 최대 데이터 갯수
#undef random 
#define random() ((rand() % 10) +1) // 랜덤 가격책정을 위한 함수

void Reservation_Search() {
EXEC SQL BEGIN DECLARE SECTION;
   varchar no[20];
   varchar anumber[20];
   varchar start[20];
   varchar dest[20];
   varchar sdate[50];
   varchar ddate[50];

   char dynstmt[1000];
EXEC SQL END DECLARE SECTION;

    char  flag = 'n' ;
    int x, y, count=0, i ;


    /* Register sql_error() as the error handler. */
    EXEC SQL WHENEVER SQLERROR DO sql_error("\7ORACLE ERROR:\n");

    /* 사용자 입력 */
    system("cls");
    printf("\n");
    clrscr(); 
    print_screen("Reservation_Search.txt");
        
    /*날짜 형식 변환*/
    EXEC SQL alter session set nls_date_format = 'YYYY-MM-DD HH24:MI';
    /* 실행시킬 SQL 문장*/
    sprintf(dynstmt,"SELECT * FROM flight"); 

    EXEC SQL PREPARE S FROM :dynstmt ;

    /* cursor open */
    EXEC SQL OPEN c_cursor ; 

    EXEC SQL WHENEVER NOT FOUND DO break;

    x = 0;
    y = 10 ;

    for (;;) {

        EXEC SQL FETCH c_cursor INTO :no, :anumber, :start, :dest, :sdate, :ddate;
        no.arr[no.len] = '\0' ;
        anumber.arr[anumber.len] = '\0';
        start.arr[start.len] = '\0';
        dest.arr[dest.len] = '\0';
        sdate.arr[sdate.len] = '\0';
        ddate.arr[ddate.len] = '\0';
        gotoxy(x,y);
        printf(" | %-3s | %-6s | %-8s | %-8s | %-15s | %-15s |", no.arr, anumber.arr, start.arr, dest.arr, sdate.arr, ddate.arr);
        y++;
        count++;
	    if(count == PAGE_NUM) {
            printf("\n                                  hit any key\n");
            count = 0;
            getch();
            gotoxy(0,10); //이전 화면 부분 클리어
            for(i= 0; i < PAGE_NUM; i++) {
                printf("                                                                              \n");
            }
            y = 10 ;
	    }

    }
    printf("\n(END)");

    /* Close the cursor. */
    EXEC SQL CLOSE c_cursor;

    EXEC SQL COMMIT ;

    char sel[20];
    char seat[20];

    gotoxy(45,6);
    gets(sel);
    int val = sel[0] - '0';
    if (val == 0) {
        // 뒤로
        Reservation();
    } else {
        // 예매번호 입력
        gotoxy(44,23);
        gets(seat);
        
        sprintf(dynstmt,"select * from flight where flight_number = '%s'", sel);

        EXEC SQL PREPARE S FROM :dynstmt ;

        EXEC SQL OPEN c_cursor ; 

        EXEC SQL WHENEVER NOT FOUND do break;
        for(;;)
        {
            EXEC SQL FETCH c_cursor INTO :no, :anumber, :start, :dest, :sdate, :ddate;

            no.arr[no.len] = '\0' ;
            anumber.arr[anumber.len] = '\0';
            start.arr[start.len] = '\0';
            dest.arr[dest.len] = '\0';
            sdate.arr[sdate.len] = '\0';
            ddate.arr[ddate.len] = '\0';
        }
    
        EXEC SQL CLOSE c_cursor; 

        srand(time(NULL));
        int price = 100000 * random();

        /* 예매 확인 */
        system("cls");
        printf("\n");
        clrscr(); 
        print_screen("Reservation_Confirm.txt");
        gotoxy(42,8);
        printf("%s", sdate.arr);

        gotoxy(42,9);
        printf("%d", price);

        gotoxy(42,10);
        printf("%s", global_id);

        gotoxy(42,11);
        printf("%s", seat);

        gotoxy(42,12);
        printf("%s", sel);

        gotoxy(45,18) ; 

        flag = (char *)getch() ;

        if( flag == 'y' || flag =='Y' ){
            sprintf(dynstmt,"insert into reservation values (RESERV_NO.NEXTVAL, '%s', '%d', '%s', '%s', '%s')", sdate.arr, price, global_id, seat, no.arr);
            // printf("stmt:%s\n", dynstmt);
            /* 실행시킬 SQL 문장*/
            EXEC SQL EXECUTE IMMEDIATE :dynstmt ;
            // RESERV_NO 시퀸스 INSERT에 RESERV_NO.NEXTVAL
            printf("예매 성공\n *실패시 에러문구가 출력됩니다.");   
            printf("잠시후 홈화면으로 이동합니다.");
            EXEC SQL COMMIT WORK ;
            Sleep(2000);
            mainPage();
        }
        else {
                printf("\n예매를 취소합니다.");
                Sleep(1000);
                Reservation();
        }
    }
}

void MyReserv() {

EXEC SQL BEGIN DECLARE SECTION;
    varchar no[20];
    varchar date[20];
    varchar price[20];
    varchar reservid[20];
    varchar seat[10];
    varchar fnumber[20];
    varchar v_ridck[20];

    char dynstmt[1000];
EXEC SQL END DECLARE SECTION;

    char  flag = 'n' ;
    int x, y, count=0, i ;


    /* Register sql_error() as the error handler. */
    EXEC SQL WHENEVER SQLERROR DO sql_error("\7ORACLE ERROR:\n");


    /* 사용자 입력 */
        system("cls");
        printf("\n");
        clrscr(); 
        print_screen("MyReserv.txt");
        
    /*날짜 형식 변환*/
    EXEC SQL alter session set nls_date_format = 'YYYY-MM-DD HH24:MI';
    /* 실행시킬 SQL 문장*/
    sprintf(dynstmt,"SELECT * FROM reservation where reservation_id = '%s'", global_id); 

    EXEC SQL PREPARE S FROM :dynstmt ;

    /* cursor open */
    EXEC SQL OPEN c_cursor ; 

    EXEC SQL WHENEVER NOT FOUND DO break;

    x = 0;
    y = 10 ;

    for (;;) {
        EXEC SQL FETCH c_cursor INTO :no, :date, :price, :reservid, :seat, :fnumber;
        no.arr[no.len] = '\0' ;
        date.arr[date.len] = '\0';
        price.arr[price.len] = '\0';
        reservid.arr[reservid.len] = '\0';
        seat.arr[seat.len] = '\0';
        fnumber.arr[fnumber.len] = '\0';
        gotoxy(x,y);
        printf(" | %-3s | %-15s | %-8s | %-10s | %-8s | %-13s |", no.arr, date.arr, price.arr, reservid.arr, seat.arr, fnumber.arr);
        y++;
        count++;
        if(count == PAGE_NUM) {
            printf("\n                                  hit any key\n");
            count = 0;
            getch();
            gotoxy(0,10); //이전 화면 부분 클리어
            for(i= 0; i < PAGE_NUM; i++) {
                printf("                                                                              \n");
            }
            y = 10 ;
        }

    }
    printf("\n(END)");

    /* Close the cursor. */
    EXEC SQL CLOSE c_cursor;

    EXEC SQL COMMIT ;

    char sel[20];
    char nosel[20];

    gotoxy(45,6);
    gets(nosel);
    int val = nosel[0] - '0';
    if (val == 0) {
        // 뒤로
        Reservation();
    } else {
        sprintf(dynstmt,"SELECT reservation_id FROM reservation where reservation_number = '%s'", nosel) ;

        // printf("stmt:%s\n", dynstmt);

        EXEC SQL PREPARE S FROM :dynstmt ;

        EXEC SQL OPEN c_cursor ; 
    
        EXEC SQL WHENEVER NOT FOUND do break;
        for(;;)
        {
            EXEC SQL FETCH c_cursor INTO :v_ridck;
            v_ridck.arr[v_ridck.len] = '\0';
        }
        if(strcmp(v_ridck.arr,global_id) == 0) {
            gotoxy(45,24);
            gets(sel);
            val = sel[0] - '0';
            if(val == 2) {
                gotoxy(20,24);
                printf("삭제하시겠습니까?(y/n) :                      ");
                gotoxy(45,24);
                flag = (char *)getch() ;
                if( flag == 'y' || flag =='Y' ){
                    sprintf(dynstmt,"delete from reservation where reservation_number = '%s'", nosel);

                    /* 실행시킬 SQL 문장*/
                    EXEC SQL EXECUTE IMMEDIATE :dynstmt ;
                    
                    EXEC SQL COMMIT WORK ;

                    printf("삭제 성공\n *실패시 에러문구가 출력됩니다.");   
                    
                    Sleep(2000);
                    MyReserv();
                } else {
                        printf("    삭제를 취소합니다.");
                        Sleep(1000);
                        MyReserv();
                }
            } else {
                gotoxy(45,24);
                printf("수정");
                Sleep(1000);
                MyReserv();
            }
        } else {
            printf("데이터가 없습니다.");
            Sleep(1000);
            MyReserv();
        }
    }
}

void search_Flight() {

EXEC SQL BEGIN DECLARE SECTION;
   varchar no[20];
   varchar anumber[20];
   varchar start[20];
   varchar dest[20];
   varchar sdate[50];
   varchar ddate[50];
   varchar v_ridck[20];

   char dynstmt[1000];
EXEC SQL END DECLARE SECTION;

    char  flag = 'n' ;
    int x, y, count=0, i ;

    /* Register sql_error() as the error handler. */
    EXEC SQL WHENEVER SQLERROR DO sql_error("\7ORACLE ERROR:\n");

    /* 사용자 입력 */
    system("cls");
    printf("\n");
    clrscr(); 
    print_screen("search_Flight.txt");

    /*날짜 형식 변환*/
    EXEC SQL alter session set nls_date_format = 'YYYY-MM-DD HH24:MI';
    /* 실행시킬 SQL 문장*/
    sprintf(dynstmt,"SELECT * FROM flight"); 

    EXEC SQL PREPARE S FROM :dynstmt ;

    /* cursor open */
    EXEC SQL OPEN c_cursor ; 

    EXEC SQL WHENEVER NOT FOUND DO break;

    x = 0;
    y = 10 ;

    for (;;) {
        EXEC SQL FETCH c_cursor INTO :no, :anumber, :start, :dest, :sdate, :ddate;
        no.arr[no.len] = '\0' ;
        anumber.arr[anumber.len] = '\0';
        start.arr[start.len] = '\0';
        dest.arr[dest.len] = '\0';
        sdate.arr[sdate.len] = '\0';
        ddate.arr[ddate.len] = '\0';
        gotoxy(x,y);
        printf(" | %-3s | %-6s | %-8s | %-8s | %-15s | %-15s |", no.arr, anumber.arr, start.arr, dest.arr, sdate.arr, ddate.arr);
        y++;
        count++;
        if( count == PAGE_NUM){
            printf("\n                                  hit any key\n");
            count = 0;
            getch();
            gotoxy(0,10); //이전 화면 부분 클리어
            for(i= 0; i < PAGE_NUM; i++){
                printf("                                                                              \n");
            }
            y = 10 ;
        }
    }
    printf("\n(END)");

    /* Close the cursor. */
    EXEC SQL CLOSE c_cursor;

    EXEC SQL COMMIT;
    char sel[20];

    gotoxy(45,6);
    gets(sel);
    int val = sel[0] - '0';
    if (val == 0) {
        // 뒤로
        adminPage();
    } else {
        sprintf(dynstmt,"SELECT flight_number FROM flight where flight_number = '%s'", sel) ;

        EXEC SQL PREPARE S FROM :dynstmt ;

        EXEC SQL OPEN c_cursor ; 
    
        EXEC SQL WHENEVER NOT FOUND do break;
        for(;;)
        {
            EXEC SQL FETCH c_cursor INTO :v_ridck;
            v_ridck.arr[v_ridck.len] = '\0';
        }
        if(strcmp(v_ridck.arr,sel) == 0) {
            gotoxy(20,23);
            printf("삭제하시겠습니까?(y/n) :                      ");
            gotoxy(45,23);
            flag = (char *)getch();
            if( flag == 'y' || flag =='Y' ) {
                sprintf(dynstmt,"delete from flight where flight_number = '%s'", sel);

                /* 실행시킬 SQL 문장*/
                EXEC SQL EXECUTE IMMEDIATE :dynstmt ;
                
                EXEC SQL COMMIT WORK ;

                printf("삭제 성공\n *실패시 에러문구가 출력됩니다.");   
                
                Sleep(2000);
                search_Flight();
            } else {
                    printf("    삭제를 취소합니다.");
                    Sleep(1000);
                    search_Flight();
            }
        } else {
            printf("데이터가 없습니다.");
            Sleep(1000);
            search_Flight();
        }
    }
}

void insert_Flight() {
EXEC SQL BEGIN DECLARE SECTION;
    varchar f_number[20];
    varchar f_anumber[20];
    varchar f_splace[20];
    varchar f_dplace[20];
    varchar f_sdate[20];
    varchar f_ddate[20];

    char dynstmt[1000];
EXEC SQL END DECLARE SECTION;

    /* Register sql_error() as the error handler. */
    EXEC SQL WHENEVER SQLERROR DO sql_error("\7ORACLE ERROR:\n");

    /*날짜 형식 변환*/
    EXEC SQL alter session set nls_date_format = 'YYYY-MM-DD HH24:MI';

    system("cls");
    printf("\n");
    clrscr();  
    print_screen("insert_Flight.txt");
    /* 항공편 번호 */
    gotoxy(43,8)  ; 
    gets(f_number.arr);
    f_number.len = strlen(f_number.arr);
    
    /* 항공기 번호 */
    gotoxy(43,9)  ;
    gets(f_anumber.arr);
    f_anumber.len = strlen(f_anumber.arr);

    /* 출발지 */
    gotoxy(39,10) ;
    gets(f_splace.arr);
    f_splace.len = strlen(f_splace.arr);
	
    /* 도착지 */
    gotoxy(39,11) ;
    gets(f_dplace.arr);
    f_dplace.len = strlen(f_dplace.arr);

    /* 출발시간 */
    gotoxy(41,12) ;
    gets(f_sdate.arr);
    f_sdate.len = strlen(f_sdate.arr);

    /* 도착시간 */
    gotoxy(41,13) ;
    gets(f_ddate.arr);
    f_ddate.len = strlen(f_ddate.arr);

    sprintf(dynstmt,"insert into Flight values ( '%s', '%s', '%s', '%s', '%s', '%s')" ,f_number.arr, f_anumber.arr, f_splace.arr, f_dplace.arr, f_sdate.arr, f_ddate.arr);

    /* 실행시킬 SQL 문장*/
    EXEC SQL EXECUTE IMMEDIATE :dynstmt ;

    EXEC SQL COMMIT WORK ;
    printf("\n\n\n\n항공편이 추가 되었습니다.");
    printf("\n*에러메시지가 출력된 경우 추가되지 않습니다.");
    Sleep(2000);
    adminPage();
}

void search_Airplane() {
    EXEC SQL BEGIN DECLARE SECTION;
    varchar no[20];
    varchar model[20];
    varchar personal[20];

    char dynstmt[1000];
    EXEC SQL END DECLARE SECTION;

    char  flag = 'n' ;
    int x, y, count=0, i ;

    /* Register sql_error() as the error handler. */
    EXEC SQL WHENEVER SQLERROR DO sql_error("\7ORACLE ERROR:\n");

    /* 사용자 입력 */
    system("cls");
    printf("\n");
    clrscr(); 
    print_screen("Airplane_Search.txt");
        
    /* 실행시킬 SQL 문장*/
    sprintf(dynstmt,"SELECT * FROM airplane"); 

    EXEC SQL PREPARE S FROM :dynstmt ;

    /* cursor open */
    EXEC SQL OPEN c_cursor ; 

    EXEC SQL WHENEVER NOT FOUND DO break;

    x = 0;
    y = 10 ;

    for (;;) {
        EXEC SQL FETCH c_cursor INTO :no, :model, :personal;
        no.arr[no.len] = '\0' ;
        model.arr[model.len] = '\0';
        personal.arr[personal.len] = '\0';
        gotoxy(x,y);
        printf("| %-15s | %-15s | %-20s |", no.arr, model.arr, personal.arr);
        y++;
        count++;
        if( count == PAGE_NUM) {
            printf("\n                                  hit any key\n");
            count = 0;
            getch();
            gotoxy(0,10); //이전 화면 부분 클리어
            for(i= 0; i < PAGE_NUM; i++) {
                printf("                                                                              \n");
            }
            y = 10 ;
        }
    }
    printf("\n(END)");

    /* Close the cursor. */
    EXEC SQL CLOSE c_cursor;

    EXEC SQL COMMIT ;

    char sel[20];

    gotoxy(45,6);
    gets(sel);
    int val = sel[0] - '0';
    if (val == 0) {
        // 뒤로
        adminPage();
    } else {
        // 잘못 입력
        search_Airplane();
    }
}

void My_Mileage() {
    EXEC SQL BEGIN DECLARE SECTION;
    varchar mileage[20];

    char dynstmt[1000];
    EXEC SQL END DECLARE SECTION;

    /* 사용자 입력 */
    system("cls");
    printf("\n");
    clrscr(); 
    print_screen("mypage_Mileage.txt");
        
    /* 실행시킬 SQL 문장*/
    sprintf(dynstmt,"SELECT member_mileage FROM mem WHERE member_id = '%s'", global_id); 

    EXEC SQL PREPARE S FROM :dynstmt ;

    EXEC SQL OPEN c_cursor ; 

    EXEC SQL WHENEVER NOT FOUND do break;
    for(;;)
    {
        EXEC SQL FETCH c_cursor INTO :mileage;
	    mileage.arr[mileage.len] = '\0';
    }
    EXEC SQL CLOSE c_cursor; 

    gotoxy(42,8);
    printf("%s", mileage.arr);

    char sel[20];

    gotoxy(42,11);
    gets(sel);
    int val = sel[0] - '0';
    if (val == 0) {
        // 뒤로
        Mypage();
    } else {
        // 잘못 입력
        My_Mileage();
    }
}

/* --------------------------------------------------------------------------
void sql_error()

   errrpt prints the ORACLE error msg and number.
-------------------------------------------------------------------------- */
void sql_error(char *msg)
{
    char err_msg[128];
    size_t buf_len, msg_len;

    EXEC SQL WHENEVER SQLERROR CONTINUE;

    printf("\n%s\n", msg);
    buf_len = sizeof (err_msg);
    sqlglm(err_msg, &buf_len, &msg_len);
    printf("%.*s\n", msg_len, err_msg);

    getch();
    EXEC SQL ROLLBACK WORK ;

}

/*---------------  화면 커서 제어 함수 --------------------*/
#define STD_HANDLE GetStdHandle(STD_OUTPUT_HANDLE)

void gotoxy(int x, int y)
{
    COORD Cur= {(SHORT)x, (SHORT) y};

    SetConsoleCursorPosition(STD_HANDLE, Cur);
}

void getxy(int *x, int *y)
{
    CONSOLE_SCREEN_BUFFER_INFO Buf ;

    GetConsoleScreenBufferInfo(GetStdHandle(STD_OUTPUT_HANDLE), &Buf);
    *x = (int)Buf.dwCursorPosition.X ;
    *y = (int)Buf.dwCursorPosition.Y ;
 
}

void clrscr(void)
{
    COORD Cur= {0, 0};
    unsigned long dwLen;

    FillConsoleOutputCharacter(STD_HANDLE, ' ', 80*25, Cur, &dwLen);
}

/*---------------------------------------------------------*/
